#!/usr/bin/env Rscript

###########################################################################################
## Step 1:                                                                               ##
## Convert the TPM matrix to a long format text file that only includes one column       ##
## (TPM_Value).                                                                          ##
## The rowname contains with condition and the gene name (the group number still have    ##
## some replicates), seperated by a space.                                               ##
###########################################################################################

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager","argparse")
BiocManager::install()

suppressPackageStartupMessages(library(argparse))

parser = ArgumentParser()
parser$add_argument("--name_list", help="a file containing a list of dataset names", required=TRUE)
parser$add_argument("--input", help="the folder holding input orthologs expression matrices (end with *.allsp_clugene.TPM)", required=TRUE)
parser$add_argument("--output", help="path to save the output tables", required=TRUE)
args = parser$parse_args()

name_list_file = args$name_list
mx_path = args$input
output_path = args$output

files <- scan(name_list_file, character(), quote = "")

for (i in 1:length(files)){
  project <- files[i]
  file_path <- paste0(mx_path, project,".allsp_clugene.TPM")
  TPM_DF <- read.table(file_path, row.names = 1)
  TPM_matrix <- as.matrix(TPM_DF)

  long_m <- matrix(TPM_matrix, dimnames=list(t(outer(colnames(TPM_matrix), rownames(TPM_matrix), FUN=paste)), NULL))

  out_long <- data.frame(long_m)
  colnames(out_long) <- "TPM_Value"
  output_file_path <- paste0(output_path,"long_format_",project,"_mulgp.txt")
  write.table(out_long, output_file_path , append = FALSE, sep = "\t", dec = ",", row.names = TRUE, col.names = TRUE, quote = FALSE)
}
